
#워크플로우 이름
name: Graduation Project CI/CD

#워크플로우가 실행될 조건
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

#작업(job) 목록
jobs:
  #1. CI - 프로젝트 빌드 및 테스트
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Run test #멀티 스테이지 방식을 사용했기에 jar 빌드는 도커가 대신함 따라서 테스트만 진행
      run: ./gradlew test


  # 2. Docker 이미지 빌드 및 푸시 작업 (main 브랜치 push 시에만 실행)
  build-and-push:
    # 프로젝트 빌드가 성공해야만 이 작업을 실행
    needs: build
    
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Docker Login
      uses: docker/login-action@v3.5.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push Docker image
      uses: docker/build-push-action@v6.18.0
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/graduation-service:latest

  # 3. CD - EC2 배포
  deploy:
    # build-and-push가 성공해야 이 작업을 실행
    needs: build-and-push

    runs-on: ubuntu-latest
    permissions:
        contents: none #이 작업은 코드와 상호작용하지 않으므로 권한 필요 없음

    steps:
    - name: Deploy to EC2 instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PEM_KEY }}
        script: |
          # 배포할 프로젝트 경로를 변수로 지정
          PROJECT_PATH="/home/ubuntu/graduation-service"
          
          # 1. 프로젝트 폴더가 존재하는지 확인
          if [ -d "$PROJECT_PATH" ]; then
            # 폴더가 있으면: 해당 폴더로 이동 후 최신 코드를 pull 받음
            echo "Project directory exists. Pulling latest code."
            cd $PROJECT_PATH
            git pull origin main
          else
            # 폴더가 없으면: Git 저장소를 새로 clone 받음 (최초 배포 시)
            echo "Project directory does not exist. Cloning repository."
            git clone https://github.com/${{ github.repository }}.git $PROJECT_PATH
            cd $PROJECT_PATH
          fi
          
          # 2. .env 파일 생성
          echo "DB_URL=jdbc:mysql://${{ secrets.RDS_ENDPOINT }}:3306/graduation?serverTimezone=Asia/Seoul&characterEncoding=UTF-8" > .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "ADMIN_INITIAL_ID=${{ secrets.ADMIN_ID }}" >> .env
          echo "ADMIN_INITIAL_PW=${{ secrets.ADMIN_PW }}" >> .env
          
          # 3. 최신 이미지 pull 및 docker-compose 재시작
          docker pull ${{ secrets.DOCKER_USERNAME }}/graduation-service:latest
          docker compose up -d
          
          # 4. 불필요한 이전 이미지 삭제
          docker image prune -f
      
  
        
